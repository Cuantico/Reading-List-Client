{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","actions/index.js","App.js","reducers/book.js","reducers/index.js","index.js"],"names":["getBooksQuery","gql","getAuthorsQuery","addBookMutation","getBookQuery","BookDetails","props","useQuery","variables","bookid","loading","error","data","id","console","log","book","name","genre","author","className","books","map","item","key","displayBookDetails","BookList","useState","selected","setSelected","displayBooks","onClick","event","AddBook","newBook","setNewBook","dispatch","useDispatch","useMutation","addBookToDB","displayAuthors","authors","value","handleChange","preventDefault","target","onSubmit","type","payload","authorid","refetchQueries","query","bind","required","onChange","client","ApolloClient","uri","App","initState","bookReducer","state","action","allReducers","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56bd7b23.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\n\nconst getBooksQuery = gql`\n  {\n    books {\n      name\n      id\n    }\n  }\n`;\n\nconst getAuthorsQuery = gql`\n  {\n    authors {\n      name\n      id\n    }\n  }\n`;\n\nconst addBookMutation = gql`\n  mutation($name: String!, $genre: String!, $authorid: ID!) {\n    addBook(name: $name, genre: $genre, authorid: $authorid) {\n      name\n      id\n    }\n  }\n`;\n\nconst getBookQuery = gql`\n  query($id: ID) {\n    book(id: $id) {\n      id\n      name\n      genre\n      author {\n        id\n        name\n        age\n        books {\n          name\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport { getAuthorsQuery, getBooksQuery, addBookMutation, getBookQuery };\n","import React from \"react\";\n//import { Component } from \"react\";\nimport { getBookQuery } from \"../queries/queries\";\n//import { graphql } from \"react-apollo\";\nimport { useQuery } from \"@apollo/react-hooks\";\n\nfunction BookDetails(props) {\n  const { loading, error, data } = useQuery(getBookQuery, {\n    variables: props.bookid\n  });\n\n  if (loading)\n    return (\n      <div id=\"Book-details\">\n        <p>Loading books...</p>\n      </div>\n    );\n  if (error) {\n    console.log(\"error:\", error);\n    return <p>Error :(</p>;\n  }\n\n  const displayBookDetails = () => {\n    const { book } = data;\n    if (book) {\n      return (\n        <div>\n          <h2>{book.name}</h2>\n          <p>{book.genre}</p>\n          <p>{book.author.name}</p>\n          <p>All books by this author</p>\n          <ul className=\"other-books\">\n            {book.author.books.map(item => {\n              return <li key={item.id}>{item.name}</li>;\n            })}\n          </ul>\n        </div>\n      );\n    } else {\n      return <div>No book selected...</div>;\n    }\n  };\n  return <div id=\"Book-details\">{displayBookDetails()}</div>;\n}\n\nexport default BookDetails;\n\n/* class BookDetails extends Component {\n  displayBookDetails() {\n    const { book } = this.props.data;\n    if (book) {\n      return (\n        <div>\n          <h2>{book.name}</h2>\n          <p>{book.genre}</p>\n          <p>{book.author.name}</p>\n          <p>All books by this author</p>\n          <ul className=\"other-books\">\n            {book.author.books.map(item => {\n              return <li key={item.id}>{item.name}</li>;\n            })}\n          </ul>\n        </div>\n      );\n    } else {\n      return <div>No book selected...</div>;\n    }\n  }\n  render() {\n    return <div id=\"Book-details\">{this.displayBookDetails()}</div>;\n  }\n}\n\nexport default graphql(getBookQuery, {\n  options: props => {\n    return {\n      variables: props.bookid\n    };\n  }\n})(BookDetails); */\n","import React, { useState } from \"react\";\nimport { getBooksQuery } from \"../queries/queries\";\n//import { graphql } from \"react-apollo\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport BookDetails from \"./BookDetails\";\n\nfunction BookList() {\n  const [selected, setSelected] = useState(null);\n\n  const { loading, error, data } = useQuery(getBooksQuery);\n\n  if (loading) return <p>Loading books...</p>;\n  if (error) {\n    console.log(\"error:\", error);\n    return <p>Error :(</p>;\n  }\n\n  const displayBooks = data.books.map(({ name, id }) => (\n    <li\n      key={id}\n      onClick={event => {\n        setSelected({ id });\n      }}\n    >\n      {name}\n    </li>\n  ));\n\n  return (\n    <div>\n      <ul id=\"book-list\">{displayBooks}</ul>\n      <BookDetails bookid={selected} />\n    </div>\n  );\n}\n\nexport default BookList;\n\n/*class BookList extends React.Component {\n  displayBooks() {\n    var data = this.props.data;\n    if (data.loading) {\n      return <p>Loading books...</p>;\n    } else {\n      return data.books.map(book => {\n        return <li key={book.id}>{book.name}</li>;\n      });\n    }\n  }\n\n  render() {\n    console.log(this.props);\n\n    return (\n      <div>\n        <ul id=\"book-list\">{this.displayBooks()}</ul>\n        <BookDetails />\n      </div>\n    );\n  }\n}\n\nexport default graphql(getBooksQuery)(BookList); */\n","import React, { useState } from \"react\";\nimport {\n  getAuthorsQuery,\n  addBookMutation,\n  getBooksQuery\n} from \"../queries/queries\";\nimport { useDispatch } from \"react-redux\";\nimport { addBookAction } from \"../actions\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\n\nfunction AddBook(props) {\n  const [newBook, setNewBook] = useState([]);\n\n  const dispatch = useDispatch();\n\n  const { loading, data } = useQuery(getAuthorsQuery);\n\n  const [addBookToDB, { error }] = useMutation(addBookMutation);\n\n  if (loading) return <p>Loading authors...</p>;\n  if (error) {\n    console.log(\"error:\", error);\n    return <p>Error :(</p>;\n  }\n\n  const displayAuthors = data.authors.map(({ name, id }) => (\n    <option key={id} value={id}>\n      {name}\n    </option>\n  ));\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(newBook);\n    dispatch(addBookAction(newBook));\n    addBookToDB({\n      variables: {\n        name: newBook.name,\n        genre: newBook.genre,\n        authorid: newBook.authorid\n      },\n      refetchQueries: [{ query: getBooksQuery }]\n    });\n  };\n\n  const handleChange = event => {\n    event.preventDefault();\n    setNewBook({ ...newBook, [event.target.name]: event.target.value });\n  };\n\n  return (\n    <form id=\"add-book\" onSubmit={handleSubmit.bind(props)}>\n      <div className=\"field\">\n        <label>Book name:</label>\n        <input type=\"text\" required name=\"name\" onChange={handleChange} />\n      </div>\n\n      <div className=\"field\">\n        <label>Genre:</label>\n        <input type=\"text\" required name=\"genre\" onChange={handleChange} />\n      </div>\n\n      <div className=\"field\">\n        <label>Author:</label>\n        <select name=\"authorid\" required onChange={handleChange}>\n          <option></option>\n          {displayAuthors}\n        </select>\n      </div>\n      <button>+</button>\n    </form>\n  );\n}\n\nexport default AddBook;\n\n/*\nimport { graphql } from \"react-apollo\";\nimport { flowRight as compose } from \"lodash\";\n\nclass AddBook extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      genre: \"\",\n      author: \"\"\n    };\n  }\n\n  displayAuthors() {\n    var data = this.props.getAuthorsQuery;\n    if (data.loading) {\n      return <option disabled>Loading authors...</option>;\n    } else {\n      return data.authors.map(author => {\n        return (\n          <option key={author.id} value={author.id}>\n            {author.name}\n          </option>\n        );\n      });\n    }\n  }\n\n  submitForm(e) {\n    e.preventDefault();\n    this.props.addBookMutation({\n      variables: {\n        name: this.state.name,\n        genre: this.state.genre,\n        authorid: this.state.authorid\n      },\n      refetchQueries: [{ query: getBooksQuery }]\n    });\n  }\n\n  render() {\n    return (\n      <form id=\"add-book\" onSubmit={this.submitForm.bind(this)}>\n        <div className=\"field\">\n          <label>Book name:</label>\n          <input\n            type=\"text\"\n            required\n            onChange={e => this.setState({ name: e.target.value })}\n          />\n        </div>\n\n        <div className=\"field\">\n          <label>Genre:</label>\n          <input\n            type=\"text\"\n            required\n            onChange={e => this.setState({ genre: e.target.value })}\n          />\n        </div>\n\n        <div className=\"field\">\n          <label>Author:</label>\n          <select onChange={e => this.setState({ authorid: e.target.value })}>\n            <option>Select author</option>\n            {this.displayAuthors()}\n          </select>\n        </div>\n        <button>+</button>\n      </form>\n    );\n  }\n}\nexport default compose(\n  graphql(getAuthorsQuery, { name: \"getAuthorsQuery\" }),\n  graphql(addBookMutation, { name: \"addBookMutation\" })\n)(AddBook); */\n","export const addBookAction = nr => {\n  return {\n    type: \"ADDBOOK\",\n    payload: nr\n  };\n};\n","import React from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\n//components\nimport BookList from \"./components/BookList\";\nimport AddBook from \"./components/AddBook\";\n\n//apollo cl9ient setup\nconst client = new ApolloClient({\n  uri: \"https://reading-list-server.herokuapp.com/graphql\"\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div id=\"main\">\n        <h1>Ninja's Reading List </h1>\n        <BookList />\n        <AddBook />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const initState = { name: \"\", genre: \"\", authorid: \"\" };\n\nconst bookReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"ADDBOOK\":\n      return (state = action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default bookReducer;\n","import bookReducer from \"./book\";\nimport { combineReducers } from \"redux\";\n\nconst allReducers = combineReducers({\n  book: bookReducer\n});\n\nexport default allReducers;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createStore } from \"redux\";\nimport allReducers from \"./reducers\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(\n  allReducers,\n  /* preloadedState, */\n  window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__({ trace: true, traceLimit: 25 })\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}